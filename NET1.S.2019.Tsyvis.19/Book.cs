using System;

namespace NET1.S._2019.Tsyvis._19
{
    /// <summary>Entity of book.</summary>
    public class Book
    {
        /// <summary>
        /// Gets or sets the author.
        /// </summary>
        /// <value>
        /// The author.
        /// </value>
        public string Author { get; set; }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        /// <value>
        /// The title.
        /// </value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the publishing house.
        /// </summary>
        /// <value>
        /// The publishing house.
        /// </value>
        public string PublishingHouse { get; set; }

        /// <summary>
        /// Gets or sets the year of publishing.
        /// </summary>
        /// <value>
        /// The year of publishing.
        /// </value>
        public int Year { get; set; }

        /// <summary>
        /// Gets or sets the number of pages.
        /// </summary>
        /// <value>
        /// The number of pages.
        /// </value>
        public int Pages { get; set; }

        /// <summary>
        /// Gets or sets the price.
        /// </summary>
        /// <value>
        /// The price.
        /// </value>
        public double Price { get; set; }

        /// <summary>
        /// Gets or sets the number of edition.
        /// </summary>
        /// <value>
        /// The number of edition.
        /// </value>
        public int Edition { get; set; }


        /// <summary>Converts to string.</summary>
        /// <returns>A <see cref="System.String"/> that represents this instance.</returns>
        public override string ToString()
        {
            return this.ToString("T");
        }

        /// <summary>Converts to string.</summary>
        /// <param name="provider">The provider.</param>
        /// <returns>A <see cref="System.String"/> that represents this instance.</returns>
        /// <autogeneratedoc />
        public string ToString(IFormatProvider provider)
        {
            return string.Format(provider, "{0}", this);
        }

        /// <summary>Converts to string.</summary>
        /// <param name="format">The format.</param>
        /// <returns>A <see cref="System.String"/> that represents this instance.</returns>
        /// <exception cref="ArgumentException">format is an invalid</exception>
        public string ToString(string format)
        {
            if (string.IsNullOrEmpty(format))
            {
                format = "T";
            }

            switch (format.ToUpperInvariant())
            {
                case "ATYPH":
                    return $"{Author}, {Title}, {Year}, \"{PublishingHouse}\"";

                case "ATY":
                    return $"{Author}, {Title}, {Year}";

                case "AT":
                    return $"{Author}, {Title}";

                case "TPH":
                    return $"{Title}, \"{PublishingHouse}\"";

                case "TYPH":
                    return $"{Title}, {Year}, \"{PublishingHouse}\"";

                case "T":
                    return $"{Title}";

                default:
                    throw new ArgumentException($"{format} is an invalid format");
            }
        }
    }
}
